apiVersion: apps/v1
kind: Deployment
metadata:
  name: VAR:INSTANCE_NAME
  labels:
    app: VAR:INSTANCE_NAME
    template: symfony
spec:
  replicas: VAR:REPLICAS_COUNT
  selector:
    matchLabels:
      app: VAR:INSTANCE_NAME
  template:
    metadata:
      labels:
        app: VAR:INSTANCE_NAME
        template: symfony
    spec:
      imagePullSecrets:
      - name: regcred
      volumes:
      - name: project
        emptyDir: {}
      - name: cache
        emptyDir: {}
      initContainers:
      - name: cloner
        image: alpine/git
        args: ["clone", "--branch=VAR:BRANCH", "--single-branch", "VAR:REPOSITORY", "/project"]
        volumeMounts:
        - mountPath: /project
          name: project
      - name: initializer
        image: wiilog/symfony-initializer:latest
        command: ["/bootstrap/entrypoint.sh"]
        env:
        - name: DATABASE_HOST
          value: "VAR:DATABASE_HOST"
        - name: DATABASE_PORT
          value: "VAR:DATABASE_PORT"
        - name: DATABASE_USER
          value: "VAR:DATABASE_USER"
        - name: DATABASE_PASSWORD
          value: "VAR:DATABASE_PASS"
        - name: DATABASE_NAME
          value: "VAR:DATABASE_NAME"
        - name: DATABASE_URL
          value: "mysql://VAR:DATABASE_USER:VAR:DATABASE_PASS@VAR:DATABASE_HOST:VAR:DATABASE_PORT/VAR:DATABASE_NAME"
        - name: APP_ENV
          value: "VAR:ENV"
        VAR:NAME_1
        VAR:VALUE_1
        VAR:NAME_2
        VAR:VALUE_2
        VAR:NAME_3
        VAR:VALUE_3
        VAR:NAME_4
        VAR:VALUE_4
        VAR:NAME_5
        VAR:VALUE_5
        volumeMounts:
        - mountPath: /project
          name: project
        - mountPath: /project/var
          name: cache
      containers:
      - name: application
        image: wiilog/symfony:latest
        command: ["/bootstrap/entrypoint.sh"]
        env:
        - name: DOMAIN
          value: "VAR:DOMAIN"
        - name: DATABASE_URL
          value: "mysql://VAR:DATABASE_USER:VAR:DATABASE_PASS@VAR:DATABASE_HOST:VAR:DATABASE_PORT/VAR:DATABASE_NAME"
        - name: APP_ENV
          value: "VAR:ENV"
        - name: APP_SECRET
          value: "VAR:SECRET"
        VAR:NAME_1
        VAR:VALUE_1
        VAR:NAME_2
        VAR:VALUE_2
        VAR:NAME_3
        VAR:VALUE_3
        VAR:NAME_4
        VAR:VALUE_4
        VAR:NAME_5
        VAR:VALUE_5
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /project
          name: project
        - mountPath: /project/var
          name: cache

---
apiVersion: v1
kind: Service
metadata:
  name: VAR:INSTANCE_NAME
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: VAR:INSTANCE_NAME

---    
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: VAR:INSTANCE_NAME
  annotations:
    kubernetes.io/ingress.class: "nginx"    
    cert-manager.io/issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts: ["VAR:DOMAIN"]
    secretName: VAR:INSTANCE_NAME-tls
  rules:
  - host: VAR:DOMAIN
    http:
      paths:
      - path: /
        backend:
          serviceName: VAR:INSTANCE_NAME
          servicePort: 80